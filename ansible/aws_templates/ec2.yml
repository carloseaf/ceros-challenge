---
Description: 'AWS CloudFormation Template EC2InstanceWithSecurityGroup:
  Create an Amazon EC2 instance running the Amazon Linux AMI + Docker. This example creates an EC2 security group
  for the instance to give you SSH and HTTP access. Policy created in order to deny access to EC2 resources.'
Parameters:  
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium    
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64    
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64    
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0ff8a91507f77f867
      HVMG2: ami-0a584ac55a7631c0c
    us-west-2:
      HVM64: ami-035bbacb010ca270b
      HVMG2: ami-0e09505bc235aa82d
    us-west-1:
      HVM64: ami-0bdb828fd58c52235
      HVMG2: ami-066ee5fd4a9ef77f1    
Resources:
# EC2 instance in which two instances of web application and one instance of nginx are deployed
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      IamInstanceProfile:
        Ref: CerosChallengeInstanceProfile      
      ImageId: "ami-035bbacb010ca270b"        
# UserData is setting rsa key, it`s not corrected, only for challenge purpose
      UserData:
          Fn::Base64:
            Fn::Join:
            - ''
            - - "#!/bin/bash\n"
              - "yum install -y git curl\n"
              - "curl -H 'Authorization: token 16be005cfa58272196251b2974be185d823ca04a' -H 'Accept: application/vnd.github.v3.raw' -O -L https://raw.githubusercontent.com/carloseaf/ceros-challenge/master/key/id_rsa.pub\n"
              - "mkdir -p /root/.ssh\n"
              - "mv id_rsa.pub /root/.ssh/authorized_keys\n"
              - "chmod 400 /root/.ssh/authorized_keys\n"
              - "service ssh restart\n"
# Security Group which opens port 22 used by Ansible and port 80 used by web application
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation      
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
# Policy created and associated to EC2, because no EC2 resource should be accessed
  CerosChallengeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: CerosChallengeRole
  CerosChallengePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CerosChallengePolicy
      PolicyDocument:
        Statement:
        - Effect: Deny
          Action: "*"
          Resource: "*"
      Roles:
      - Ref: CerosChallengeRole
  CerosChallengeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value:
      Ref: EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - AvailabilityZone
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PublicDnsName
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PublicIp
